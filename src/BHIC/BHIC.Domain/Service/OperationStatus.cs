using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BHIC.Domain.Service
{
    public class OperationStatus
    {
        // ----------------------------------------
        // IMPORTANT
        // ----------------------------------------
        //
        // The OperationStatus object is initialized at the beginning of each service request with useful flags and data that must be returned with the request.  
        // If a different instance of OperationStatus needs to be returned by the request, please observe the following requirements.
        //
        // The following properties must be copied from the initialized instance to the replacement instance:
        //
        // 1) RequestProcessed 
        // 2) ServiceName
        // 3) ServiceMethod
        // 4) RequestSuccessful
        // 5) All messages generated by the service's logic should be consolidated / included in the instance returned to the caller.

        // ----------------------------------------
        // constructor
        // ----------------------------------------

        public OperationStatus()
        {
            // init lists to help avoid issues related to null reference exceptions
            Messages = new List<Message>();
            AffectedIds = new List<AffectedId>();

            // default to unprocessed status; associated business logic will need to reset when processing
            RequestProcessed = false;

            // default to failed status; associated business logic will need to reset on success
            RequestSuccessful = false;
        }

        // ----------------------------------------
        // properties
        // ----------------------------------------

        /// <summary>
        /// Name of service called by the client.  See service documentation for available services.
        /// </summary>
        public string ServiceName { get; set; }

        /// <summary>
        /// Type of operation.  Typically GET, POST, DELETE.  See service documentation for operations supported.
        /// </summary>
        public string ServiceMethod { get; set; }

        /// <summary>
        /// True if the associated BatchAction was processed.  False if the BatchAction was skipped. <br />
        /// Does not indicate Success; see RequestSuccessful property. <br />
        /// Current behavior: if a BatchAction fails, all subsequent BatchActions in that BatchActionList are skipped / not processed. <br />
        /// </summary>
        public bool RequestProcessed { get; set; }

        /// <summary>
        /// For typical service operations: True if request was successfully processed, otherwise false.<br />
        /// For validation service operations: True if validation passed the designated test, otherwise false.<br />
        /// Naming convention for validation services: V[ObjectNameHere][ValidationDescHere]<br />
        /// Examples of validation service names:<br />
        /// - VExposuresMinPayroll<br />
        /// - VUserPoliciesValidPolicyCode<br />
        /// </summary>
        public bool RequestSuccessful { get; set; }

        /// <summary>
        /// Messages returned by the service
        /// </summary>
        public List<Message> Messages { get; set; }

        /// <summary>
        /// List of IDs affected by the operation.  Contains the Name, ID, and Operation (POST, DELETE) of the inserted, updated, or deleted row.
        /// </summary>
        public List<AffectedId> AffectedIds { get; set; }

        /// <summary>
        /// For Internal use by the Insurance Service only.  Read-only identifier of the primary record associated with the request.  Captured in event logging.  (e.g. - for Questions GET requests, this would be the QuoteID value.)
        /// </summary>
        public int RecordKey { get; set; }
    }


    /// <summary>
    /// List of IDs affected by the operation (e.g. - id of inserted row)
    /// </summary>
    public class AffectedId
    {
        public string DTOName { get; set; }					// Contact, Exposure, Modifier, etc...
        public string DTOProperty { get; set; }				// ContactId, ExposureId, ModifierId, etc...
        public string IdValue { get; set; }					// 1,2,3, a,b,c etc...
        public OperationType OperationType { get; set; }	// POST, PUT, GET, DELETE enums
    }

    /// <summary>
    /// Message returned by the service
    /// </summary>
    public class Message
    {
        /// <summary>
        /// Name of the DTO associated with the message (Contact, Exposure, Modifier, etc...)
        /// </summary>
        public string DTOName { get; set; }

        /// <summary>
        /// Name of the DTO' Property associated with the message (ContactName, ExposureAmt, ModifierType, etc...)
        /// </summary>
        public string DTOProperty { get; set; }

        /// <summary>
        /// Error / Warning / Info / SystemError...<br />
        /// NOTE: 'SystemError' messages contain error text that shouldn't be displayed to end users.<br />
        /// Examples: if a request is not formatted properly...<br />
        ///		"QuoteId is required for the specified Exposure."<br />
        ///		"Unexpected character encountered while parsing value: 'ExposureAmt', line 1, position 175"<br />
        /// </summary>
        public MessageType MessageType { get; set; }


        /// <summary>
        /// Message Text.<br />
        /// Example:<br />
        ///	The amount specified must be at least: $15,000."<br />
        /// </summary>
        public string Text { get; set; }

    }

    public enum MessageType
    {
        // ----------------------------------------
        // User-Friendly Messages
        // ----------------------------------------

        /// <summary>
        /// Text contains user-safe information associated with an error condition that halted further processing for the request.  The UI may require the user to take steps, depending on the nature of the issue.
        /// EXAMPLE: 'Annual Premium is Required'
        /// </summary>
        UserError = 1,

        /// <summary>
        /// Text contains user-safe information associated with a questionable condition that the user should be made aware of.  The UI may require the user to take steps, depending on the nature of the issue.
        /// EXAMPLE: 'Your policy doesn't include director coverage. If you require director coverage, please add director coverage before proceeding.'
        /// </summary>
        UserWarning = 2,

        /// <summary>
        /// Text contain user-safe information that the user should be made aware of.  
        /// EXAMPLE: 'Your policy has been created!'
        /// </summary>
        UserInfo = 3,

        // ----------------------------------------
        // Messages intended for UI-developer only; shouldn't be displayed to the user
        // ----------------------------------------

        /// <summary>
        /// Text contains information related to model validation (e.g. Required, Range, StringLength, etc...) that is not suitable for end-user consumption.
        /// EXAMPLE:  'QuoteID is required'
        /// </summary>
        ModelError = 4,

        /// <summary>
        /// Text contains information related to an exception that is not be suitable for end-user consumption.
        /// EXAMPLE: (Incorrectly formatted dollar amount in json data) 'Unexpected character encountered while parsing value: abc Path 'ExposureAmt', line 1, position 193'
        /// </summary>
        SystemError = 5,

        /// <summary>
        /// Text contains other information that is not associated with an error condition, and is not suitable for end-user consumption, but may be useful to developers that use the service.
        /// EXAMPLE: 'Default Value Not Saved.  (Although the value submitted is valid, the system automatically uses default values that are configured for this service; it is therefore not neccesary to submit a defined default value.  Non-default values that are submitted will be saved.)'
        /// </summary>
        SystemInfo = 6
    }

    public enum OperationType
    {
        /// <summary>
        /// POST Operation
        /// </summary>
        POST = 1,

        ///// <summary>
        ///// PUT Operation
        ///// </summary>
        //PUT = 2,

        /// <summary>
        /// GET Operation
        /// EXAMPLE: 'Your policy has been created!'
        /// </summary>
        GET = 3,

        /// <summary>
        /// DELETE Operation
        /// </summary>
        DELETE = 4,
    }
}
